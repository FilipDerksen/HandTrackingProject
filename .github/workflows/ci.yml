name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
        
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build-check:
    name: Build Verification
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Verify imports
      run: |
        python -c "import HandTrackingModule; print('HandTrackingModule imports successfully')"
        python -c "import cv2; print('OpenCV version:', cv2.__version__)"
        python -c "import mediapipe as mp; print('MediaPipe imports successfully')"
        
    - name: Test demo scripts syntax
      run: |
        python -m py_compile HandTrackingModule.py
        python -m py_compile NewHandTrackingGame.py
        python -m py_compile HandTrackingMin.py
        python -m py_compile DistanceDemo.py
        echo "All demo scripts compile successfully"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -ll
        
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark
        
    - name: Run performance tests
      run: |
        # Test that distance calculation is fast
        python -c "
        import time
        import HandTrackingModule as htm
        
        detector = htm.HandDetector()
        
        # Test distance calculation performance
        start_time = time.time()
        for i in range(1000):
            distance, _, _ = detector.find_distance([0, 0], [100, 100], None, False)
        end_time = time.time()
        
        print(f'1000 distance calculations took: {end_time - start_time:.4f} seconds')
        print(f'Average per calculation: {(end_time - start_time) * 1000:.4f} ms')
        
        # Should be very fast (under 1ms per calculation)
        assert (end_time - start_time) < 1.0, 'Distance calculation too slow'
        print('Performance test passed!')
        "

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install documentation tools
      run: |
        python -m pip install --upgrade pip
        pip install pydocstyle
        
    - name: Check docstring style
      run: |
        pydocstyle HandTrackingModule.py || true
        echo "Docstring check completed"
        
    - name: Verify README exists and is valid
      run: |
        test -f README.md
        echo "README.md exists"
        
    - name: Check for required files
      run: |
        test -f requirements.txt
        test -f .gitignore
        test -d tests/
        echo "All required files present"

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, test, build-check, security-scan, performance-test, documentation-check]
    if: always()
    
    steps:
    - name: Notify Success
      if: ${{ needs.lint.result == 'success' && needs.test.result == 'success' && needs.build-check.result == 'success' }}
      run: |
        echo "✅ All CI/CD checks passed successfully!"
        echo "🎯 HandTrackingProject is ready for deployment"
        
    - name: Notify Failure
      if: ${{ needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.build-check.result == 'failure' }}
      run: |
        echo "❌ Some CI/CD checks failed"
        echo "Please review the logs and fix the issues"
